// –¢–µ—Å—Ç API –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ Airtable —Å—Ç–∞—Ç—É—Å–∞
console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç Airtable API...');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–µ–π
function clearLocalCaches(){
  try{
    [
      'konstructour_regions_cache_v1',
      'konstructour_cities_cache_v2', 
      'konstructour_pois_cache_v2',
      'konstructour_last_refresh',
      'konstructour_last_sync'
    ].forEach(k=> localStorage.removeItem(k));
    console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–µ –∫—ç—à–∏ –æ—á–∏—â–µ–Ω—ã');
  }catch(_){ 
    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–µ–π');
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ PAT —Ç–æ–∫–µ–Ω–∞
function isValidPatToken(token) {
  return token && /^pat\.[A-Za-z0-9_\-]{20,}$/.test(token);
}

// –¢–µ—Å—Ç 1: Health endpoint
async function testHealth() {
  console.log('üîç –¢–µ—Å—Ç 1: Health endpoint');
  try {
    const response = await fetch('api/health.php');
    const data = await response.json();
    console.log('Health response:', data);
    
    if (data.airtable) {
      console.log(`Airtable –≤ health: ${data.airtable.ok ? '‚úÖ OK' : '‚ùå –û—à–∏–±–∫–∞'}`);
      if (data.airtable.error) {
        console.log('–û—à–∏–±–∫–∞ Airtable:', data.airtable.error);
      }
    }
    return data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ health:', error);
    return null;
  }
}

// –¢–µ—Å—Ç 2: Server keys
async function testServerKeys() {
  console.log('üîç –¢–µ—Å—Ç 2: Server keys');
  try {
    const response = await fetch(`api/test-proxy.php?provider=server_keys&_=${Date.now()}`, {
      cache: 'no-store'
    });
    const data = await response.json();
    console.log('Server keys response:', data);
    
    const hasAirtableKey = !!(data && data.keys && data.keys.airtable);
    console.log(`Airtable –∫–ª—é—á –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: ${hasAirtableKey ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç'}`);
    
    return data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ server keys:', error);
    return null;
  }
}

// –¢–µ—Å—Ç 3: Airtable whoami
async function testAirtableWhoami() {
  console.log('üîç –¢–µ—Å—Ç 3: Airtable whoami');
  try {
    const response = await fetch(`api/test-proxy.php?provider=airtable&_=${Date.now()}`, {
      method: 'POST',
      cache: 'no-store',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ whoami: true })
    });
    const data = await response.json();
    console.log('Airtable whoami response:', data);
    
    const authOk = !!(data && data.ok && data.auth !== false && data.status !== 401);
    console.log(`Airtable –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: ${authOk ? '‚úÖ OK' : '‚ùå –û—à–∏–±–∫–∞'}`);
    
    if (data.error) {
      console.log('–û—à–∏–±–∫–∞ Airtable:', data.error);
    }
    
    return data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ Airtable whoami:', error);
    return null;
  }
}

// –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
async function testConfig() {
  console.log('üîç –¢–µ—Å—Ç 4: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è');
  try {
    const response = await fetch('api/config.php');
    const data = await response.json();
    console.log('Config response:', data);
    
    if (data.airtable_registry) {
      console.log('Airtable registry:', data.airtable_registry);
    }
    
    return data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ config:', error);
    return null;
  }
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
async function runAllTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã...');
  
  // –û—á–∏—â–∞–µ–º –∫—ç—à–∏
  clearLocalCaches();
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
  const health = await testHealth();
  const keys = await testServerKeys();
  const whoami = await testAirtableWhoami();
  const config = await testConfig();
  
  console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:');
  console.log('- Health endpoint:', health ? '‚úÖ' : '‚ùå');
  console.log('- Server keys:', keys ? '‚úÖ' : '‚ùå');
  console.log('- Airtable whoami:', whoami ? '‚úÖ' : '‚ùå');
  console.log('- Config:', config ? '‚úÖ' : '‚ùå');
  
  // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  const hasKey = !!(keys && keys.keys && keys.keys.airtable);
  const authOk = !!(whoami && whoami.ok && whoami.auth !== false);
  
  console.log('\nüéØ –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑:');
  console.log(`–ö–ª—é—á –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: ${hasKey ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç'}`);
  console.log(`–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: ${authOk ? '‚úÖ OK' : '‚ùå –û—à–∏–±–∫–∞'}`);
  
  if (!hasKey) {
    console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –î–æ–±–∞–≤—å—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π Airtable PAT —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å');
  } else if (!authOk) {
    console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å PAT —Ç–æ–∫–µ–Ω–∞');
  } else {
    console.log('üéâ –í—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏
window.testAirtable = {
  runAllTests,
  testHealth,
  testServerKeys,
  testAirtableWhoami,
  testConfig,
  clearLocalCaches,
  isValidPatToken
};

console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:');
console.log('- testAirtable.runAllTests() - –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã');
console.log('- testAirtable.testHealth() - —Ç–µ—Å—Ç health endpoint');
console.log('- testAirtable.testServerKeys() - —Ç–µ—Å—Ç server keys');
console.log('- testAirtable.testAirtableWhoami() - —Ç–µ—Å—Ç Airtable whoami');
console.log('- testAirtable.clearLocalCaches() - –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à–∏');
