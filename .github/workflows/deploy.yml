name: Deploy to Bluehost

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      API_BASE: ${{ secrets.API_BASE }}
      SECRET_DIR: ${{ secrets.SECRET_DIR }}
      SECRET_FILE: ${{ secrets.SECRET_DIR }}/airtable.json
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH key
      shell: bash
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
        echo "SSH key ready"
        
    - name: Deploy to server
      shell: bash
      run: |
        set -euo pipefail
        echo "🚀 Starting deployment..."
        
        # Clean up old backups and ensure directory exists
        ssh -i ~/.ssh/id_rsa ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
          # Remove old backup directories
          rm -rf '${{ secrets.SERVER_PATH }}_backup_'*
          echo 'Old backups cleaned up'
          
          # Ensure main directory exists
          if [ ! -d '${{ secrets.SERVER_PATH }}' ]; then
            mkdir -p '${{ secrets.SERVER_PATH }}'
            echo 'Directory created'
          fi
        "
        
        # Sync files
        rsync -avz --delete --rsync-path='rsync' \
          --exclude='api/config.php' \
          --exclude='api/backups/' \
          -e "ssh -i ~/.ssh/id_rsa" \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='.github' \
          --exclude='*.log' \
          ./ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:${{ secrets.SERVER_PATH }}/
        
        # Set permissions
        ssh -i ~/.ssh/id_rsa ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
          find '${{ secrets.SERVER_PATH }}' -type f -exec chmod 644 {} \;
          find '${{ secrets.SERVER_PATH }}' -type d -exec chmod 755 {} \;
          echo '✅ File permissions set'
        "
        
        # Bootstrap Airtable secrets (NO SUDO, user-scope)
        ssh -i ~/.ssh/id_rsa ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} 'bash -s' <<'REMOTE'
        set -euo pipefail
        : "${SECRET_DIR:=${HOME}/konstructour/secrets}"
        : "${SECRET_FILE:=${SECRET_DIR}/airtable.json}"

        echo "🔧 Using SECRET_DIR=$SECRET_DIR"
        mkdir -p "$SECRET_DIR"
        chmod 700 "$SECRET_DIR" || true  # на шаред-хостинге можно не дать 700 — игнорируем ошибку

        TS=$(date -u +%Y-%m-%dT%H:%M:%SZ)
        # Если файла нет — создаём. Если есть — перезаписываем текущий токен.
        cat > "$SECRET_FILE" <<JSON
        {"current":{"token":"${{ secrets.AIRTABLE_PAT }}","since":"$TS"},"next":{"token":null,"since":null}}
        JSON

        chmod 600 "$SECRET_FILE" || true

        # Верификация на чтение текущим пользователем
        if [ -r "$SECRET_FILE" ]; then
          echo "✅ Secret file created and readable: $SECRET_FILE"
        else
          echo "❌ Secret file exists but NOT readable: $SECRET_FILE"; exit 1
        fi
        REMOTE
        
        # Final verification (NO SUDO)
        ssh -i ~/.ssh/id_rsa ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} 'bash -s' <<'REMOTE'
        set -euo pipefail
        : "${SECRET_DIR:=${HOME}/konstructour/secrets}"
        : "${SECRET_FILE:=${SECRET_DIR}/airtable.json}"

        echo '🔍 Verifying deployment...'
        if [ -f "$SECRET_FILE" ]; then
          echo "✅ Secret file exists: $SECRET_FILE"
          if [ -r "$SECRET_FILE" ]; then
            echo '✅ Secret file is readable'
          else
            echo '❌ Secret file is not readable'; exit 1
          fi
        else
          echo '❌ Secret file does not exist'; exit 1
        fi
        echo '✅ Deployment completed!'
        REMOTE